package kr.or.ddit.basic.g_messenger;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Scanner;

import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import kr.or.ddit.basic.Main;
import library.ShinYS;

public class ChatSystemClient {
private String userName;


Button in_btn	= (Button) Main.StageHome.getScene().getRoot().lookup("#btn_send");
	
	// 비지니스 로직 처리
	public void clientStart() {
		userName = ShinYS.query_id;
		System.out.println("접속한 아이디 : " + userName);
		
		TextArea chat_area2 = (TextArea) Main.StageHome.getScene().getRoot().lookup("#area_chat");
		chat_area2.setText(chat_area2.getText() + "\n접속한 아이디 : " + userName + "\n");
		
		
		
		Socket socket = null;
		try {
			String serverIp = "192.168.0.5";
			socket = new Socket(serverIp, 7777);
			
			
			
			// 송신용 쓰레드 생성
			ClientSender sender = new ClientSender(socket, userName);
			
			// 수신용 쓰레드 생성
			ClientReceiver receiver = new ClientReceiver(socket);
			
			// 쓰레드 실행
			sender.start();
			receiver.start();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
//	public static void main(String[] args) {
//		new ChatSystemClient().clientStart();
//	}
	
	// 메시지를 전송하는 Thread
	class ClientSender extends Thread{
		Socket socket;
		DataOutputStream dout;
		String name;
		Scanner scan = new Scanner(System.in);
		
		
		
		public ClientSender(Socket socket, String name) {
			this.name = name;
			this.socket = socket;
			try {
				dout = new DataOutputStream(socket.getOutputStream());
			} catch (IOException e) {
				// TODO: handle exception
			}
		}
		
		@Override
		public void run() {
			
			
			try {
				// 시작하자 마자 자신의 대화명을 서버로 전송
				if(dout!=null) {
					dout.writeUTF(name);
				}
				while( dout != null) {
					// 키보드로 입력받은 메시지를 서버로 전송
					in_btn.setOnMouseClicked(e->{
						try {
							TextField in_txt = (TextField) Main.StageHome.getScene().getRoot().lookup("#txt_chat");
							dout.writeUTF("[" + name + "] " +  in_txt.getText()  + "\n");
							
							in_txt.setText("");
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
					});
					TextField in_txt = (TextField) Main.StageHome.getScene().getRoot().lookup("#txt_chat");
					in_txt.setOnKeyPressed(e->{
						if(e.getCode().equals(KeyCode.ENTER)) {
							try {
								TextField in_txt2 = (TextField) Main.StageHome.getScene().getRoot().lookup("#txt_chat");
								dout.writeUTF("[" + name + "] " +  in_txt2.getText() + "\n");
								in_txt2.setText("");
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
					});
					
				}
			}catch(IOException e) {
				
			}
			
			
			
			
			
		}
	}  // 송신용 쓰레드 끝...,
	
	// 수신용 Thread 클래스 정의
	class ClientReceiver extends Thread{
		Socket socket;
		DataInputStream din;
		
		// 생성자
		public ClientReceiver(Socket socket) {
			this.socket = socket;
			try {
				din = new DataInputStream(socket.getInputStream());
			} catch (IOException e) {
				// TODO: handle exception
			}
		}
		
		@Override
		public void run() {
			while(din!=null) {
				try {
					// 서버로부터 수신한 메시지 출력하기
					TextArea chat_area2 = (TextArea) Main.StageHome.getScene().getRoot().lookup("#area_chat");
					chat_area2.setText(chat_area2.getText() + din.readUTF());
					chat_area2.setScrollTop(Double.MAX_VALUE + 100);
					
					
				} catch (IOException e) {
					// TODO: handle exception
				}
			}
		}
		
	}

}